dc_lum = {
  0: "00",
  1: "010",
  2: "011",
  3: "100",
  4: "101",
  5: "110",
  6: "1110",
  7: "11110",
  8: "111110",
  9: "1111110",
  10: "11111110",
  11: "111111110"
}

dc_chrom = {
  0: "00",
  1: "01",
  2: "10",
  3: "110",
  4: "1110",
  5: "11110",
  6: "111110",
  7: "1111110",
  8: "11111110",
  9: "111111110",
  10: "1111111110",
  11: "11111111110"
}

ac_lum = {
  (0, 0): "1010",
  (0, 1): "00",
  (0, 2): "01",
  (0, 3): "100",
  (0, 4): "1011",
  (0, 5): "11010",
  (0, 6): "1111000",
  (0, 7): "11111000",
  (0, 8): "1111110110",
  (0, 9): "1111111110001000",
  (0, 10): "1111111110001001",
  (1, 1): "1100",
  (1, 2): "11011",
  (1, 3): "1111001",
  (1, 4): "111110110",
  (1, 5): "11111110110",
  (1, 6): "1111111110001010",
  (1, 7): "1111111110001011",
  (1, 8): "1111111110001100",
  (1, 9): "1111111110001101",
  (1, 10): "1111111110001110",
  (2, 1): "11100",
  (2, 2): "11111001",
  (2, 3): "1111110111",
  (2, 4): "111111110100",
  (2, 5): "1111111110001111",
  (2, 6): "1111111110010000",
  (2, 7): "1111111110010001",
  (2, 8): "1111111110010010",
  (2, 9): "1111111110010011",
  (2, 10): "1111111110010100",
  (3, 1): "111010",
  (3, 2): "111110111",
  (3, 3): "111111110101",
  (3, 4): "1111111110010101",
  (3, 5): "1111111110010110",
  (3, 6): "1111111110010111",
  (3, 7): "1111111110011000",
  (3, 8): "1111111110011001",
  (3, 9): "1111111110011010",
  (3, 10): "1111111110011011",
  (4, 1): "111011",
  (4, 2): "1111111000",
  (4, 3): "1111111110011100",
  (4, 4): "1111111110011101",
  (4, 5): "1111111110011110",
  (4, 6): "1111111110011111",
  (4, 7): "1111111110100000",
  (4, 8): "1111111110100001",
  (4, 9): "1111111110100010",
  (4, 10): "1111111110100011",
  (5, 1): "1111010",
  (5, 2): "11111110111",
  (5, 3): "1111111110100100",
  (5, 4): "1111111110100101",
  (5, 5): "1111111110100110",
  (5, 6): "1111111110100111",
  (5, 7): "1111111110101000",
  (5, 8): "1111111110101001",
  (5, 9): "1111111110101010",
  (5, 10): "1111111110101011",
  (6, 1): "1111011",
  (6, 2): "111111110110",
  (6, 3): "1111111110101100",
  (6, 4): "1111111110101101",
  (6, 5): "1111111110101110",
  (6, 6): "1111111110101111",
  (6, 7): "1111111110110000",
  (6, 8): "1111111110110001",
  (6, 9): "1111111110110010",
  (6, 10): "1111111110110011",
  (7, 1): "11111010",
  (7, 2): "111111110111",
  (7, 3): "1111111110110100",
  (7, 4): "1111111110110101",
  (7, 5): "1111111110110110",
  (7, 6): "1111111110110111",
  (7, 7): "1111111110111000",
  (7, 8): "1111111110111001",
  (7, 9): "1111111110111010",
  (7, 10): "1111111110111011",
  (8, 1): "111111000",
  (8, 2): "111111111000000",
  (8, 3): "1111111110111100",
  (8, 4): "1111111110111101",
  (8, 5): "1111111110111110",
  (8, 6): "1111111110111111",
  (8, 7): "1111111111000000",
  (8, 8): "1111111111000001",
  (8, 9): "1111111111000010",
  (8, 10): "1111111111000011",
  (9, 1): "111111001",
  (9, 2): "1111111111000100",
  (9, 3): "1111111111000101",
  (9, 4): "1111111111000110",
  (9, 5): "1111111111000111",
  (9, 6): "1111111111001000",
  (9, 7): "1111111111001001",
  (9, 8): "1111111111001010",
  (9, 9): "1111111111001011",
  (9, 10): "1111111111001100",
  (10, 1): "111111010",
  (10, 2): "1111111111001101",
  (10, 3): "1111111111001110",
  (10, 4): "1111111111001111",
  (10, 5): "1111111111010000",
  (10, 6): "1111111111010001",
  (10, 7): "1111111111010010",
  (10, 8): "1111111111010011",
  (10, 9): "1111111111010100",
  (10, 10): "1111111111010101",
  (11, 1): "1111111001",
  (11, 2): "1111111111010110",
  (11, 3): "1111111111010111",
  (11, 4): "1111111111011000",
  (11, 5): "1111111111011001",
  (11, 6): "1111111111011010",
  (11, 7): "1111111111011011",
  (11, 8): "1111111111011100",
  (11, 9): "1111111111011101",
  (11, 10): "1111111111011110",
  (12, 1): "1111111010",
  (12, 2): "1111111111011111",
  (12, 3): "1111111111100000",
  (12, 4): "1111111111100001",
  (12, 5): "1111111111100010",
  (12, 6): "1111111111100011",
  (12, 7): "1111111111100100",
  (12, 8): "1111111111100101",
  (12, 9): "1111111111100110",
  (12, 10): "1111111111100111",
  (13, 1): "11111111000",
  (13, 2): "1111111111101000",
  (13, 3): "1111111111101001",
  (13, 4): "1111111111101010",
  (13, 5): "1111111111101011",
  (13, 6): "1111111111101100",
  (13, 7): "1111111111101101",
  (13, 8): "1111111111101110",
  (13, 9): "1111111111101111",
  (13, 10): "1111111111110000",
  (14, 1): "11111111111000",
  (14, 2): "1111111111110001",
  (14, 3): "1111111111110010",
  (14, 4): "1111111111110011",
  (14, 5): "1111111111110100",
  (14, 6): "1111111111110101",
  (14, 7): "1111111111110110",
  (14, 8): "1111111111110111",
  (14, 9): "1111111111111000",
  (14, 10): "1111111111111001",
  (15, 0): "11111111001",
  (15, 1): "1111111111111010",
  (15, 2): "1111111111111011",
  (15, 3): "1111111111111100",
  (15, 4): "1111111111111101",
  (15, 5): "1111111111111110",
  (15, 6): "1111111111111111",
  (15, 7): "1111111111110000",
  (15, 8): "1111111111110001",
  (15, 9): "1111111111110010",
  (15, 10): "1111111111110011"
}

ac_chrom = {
  (0, 0): "00",
  (0, 1): "01",
  (0, 2): "100",
  (0, 3): "1010",
  (0, 4): "11000",
  (0, 5): "11001",
  (0, 6): "111000",
  (0, 7): "1111000",
  (0, 8): "111110100",
  (0, 9): "1111110110",
  (0, 10): "111111110100",
  (1, 1): "1011",
  (1, 2): "111001",
  (1, 3): "11110110",
  (1, 4): "111110101",
  (1, 5): "11111110110",
  (1, 6): "111111110101",
  (1, 7): "1111111110001000",
  (1, 8): "1111111110001001",
  (1, 9): "1111111110001010",
  (1, 10): "1111111110001011",
  (2, 1): "11010",
  (2, 2): "11110111",
  (2, 3): "1111110111",
  (2, 4): "111111110110",
  (2, 5): "111111111000010",
  (2, 6): "1111111110001100",
  (2, 7): "1111111110001101",
  (2, 8): "1111111110001110",
  (2, 9): "1111111110001111",
  (2, 10): "1111111110010000",
  (3, 1): "11011",
  (3, 2): "11111000",
  (3, 3): "1111111000",
  (3, 4): "111111110111",
  (3, 5): "1111111110010001",
  (3, 6): "1111111110010010",
  (3, 7): "1111111110010011",
  (3, 8): "1111111110010100",
  (3, 9): "1111111110010101",
  (3, 10): "1111111110010110",
  (4, 1): "111010",
  (4, 2): "111110110",
  (4, 3): "1111111110010111",
  (4, 4): "1111111110011000",
  (4, 5): "1111111110011001",
  (4, 6): "1111111110011010",
  (4, 7): "1111111110011011",
  (4, 8): "1111111110011100",
  (4, 9): "1111111110011101",
  (4, 10): "1111111110011110",
  (5, 1): "111011",
  (5, 2): "1111111001",
  (5, 3): "1111111110011111",
  (5, 4): "1111111110100000",
  (5, 5): "1111111110100001",
  (5, 6): "1111111110100010",
  (5, 7): "1111111110100011",
  (5, 8): "1111111110100100",
  (5, 9): "1111111110100101",
  (5, 10): "1111111110100110",
  (6, 1): "1111001",
  (6, 2): "11111110111",
  (6, 3): "1111111110100111",
  (6, 4): "1111111110101000",
  (6, 5): "1111111110101001",
  (6, 6): "1111111110101010",
  (6, 7): "1111111110101011",
  (6, 8): "1111111110101100",
  (6, 9): "1111111110101101",
  (6, 10): "1111111110101110",
  (7, 1): "1111010",
  (7, 2): "11111111000",
  (7, 3): "1111111110101111",
  (7, 4): "1111111110110000",
  (7, 5): "1111111110110001",
  (7, 6): "1111111110110010",
  (7, 7): "1111111110110011",
  (7, 8): "1111111110110100",
  (7, 9): "1111111110110101",
  (7, 10): "1111111110110110",
  (8, 1): "11111001",
  (8, 2): "11111111100000",
  (8, 3): "1111111110110111",
  (8, 4): "1111111110111000",
  (8, 5): "1111111110111001",
  (8, 6): "1111111110111010",
  (8, 7): "1111111110111011",
  (8, 8): "1111111110111100",
  (8, 9): "1111111110111101",
  (8, 10): "1111111110111110",
  (9, 1): "111110111",
  (9, 2): "1111111110111111",
  (9, 3): "1111111111000000",
  (9, 4): "1111111111000001",
  (9, 5): "1111111111000010",
  (9, 6): "1111111111000011",
  (9, 7): "1111111111000100",
  (9, 8): "1111111111000101",
  (9, 9): "1111111111000110",
  (9, 10): "1111111111000111",
  (10, 1): "111111000",
  (10, 2): "1111111111001000",
  (10, 3): "1111111111001001",
  (10, 4): "1111111111001010",
  (10, 5): "1111111111001011",
  (10, 6): "1111111111001100",
  (10, 7): "1111111111001101",
  (10, 8): "1111111111001110",
  (10, 9): "1111111111001111",
  (10, 10): "1111111111010000",
  (11, 1): "111111001",
  (11, 2): "1111111111010001",
  (11, 3): "1111111111010010",
  (11, 4): "1111111111010011",
  (11, 5): "1111111111010100",
  (11, 6): "1111111111010101",
  (11, 7): "1111111111010110",
  (11, 8): "1111111111010111",
  (11, 9): "1111111111011000",
  (11, 10): "1111111111011001",
  (12, 1): "111111010",
  (12, 2): "1111111111011010",
  (12, 3): "1111111111011011",
  (12, 4): "1111111111011100",
  (12, 5): "1111111111011101",
  (12, 6): "1111111111011110",
  (12, 7): "1111111111011111",
  (12, 8): "1111111111100000",
  (12, 9): "1111111111100001",
  (12, 10): "1111111111100010",
  (13, 1): "11111111001",
  (13, 2): "1111111111100011",
  (13, 3): "1111111111100100",
  (13, 4): "1111111111100101",
  (13, 5): "1111111111100110",
  (13, 6): "1111111111100111",
  (13, 7): "1111111111101000",
  (13, 8): "1111111111101001",
  (13, 9): "1111111111101010",
  (13, 10): "1111111111101011",
  (14, 1): "11111111100000",
  (14, 2): "1111111111101100",
  (14, 3): "1111111111101101",
  (14, 4): "1111111111101110",
  (14, 5): "1111111111101111",
  (14, 6): "1111111111110000",
  (14, 7): "1111111111110001",
  (14, 8): "1111111111110010",
  (14, 9): "1111111111110011",
  (14, 10): "1111111111110100",
  (15, 0): "111111110111",
  (15, 1): "111111111000011",
  (15, 2): "1111111111110101",
  (15, 3): "1111111111110110",
  (15, 4): "1111111111110111",
  (15, 5): "1111111111111000",
  (15, 6): "1111111111111001",
  (15, 7): "1111111111111010",
  (15, 8): "1111111111111011",
  (15, 9): "1111111111111100",
  (15, 10): "1111111111111101"
}

def get_huffman(ac_dc, lum_chrom, cat):
  if ac_dc == 'ac':
    if lum_chrom == 'lum':
      return get_huffman_ac_lum(cat)
    else:
      return get_huffman_ac_chrom(cat)
  else:
    if lum_chrom == 'lum':
      return get_huffman_dc_lum(cat)
    else:
      return get_huffman_dc_chrom(cat)

def get_symbol(ac_dc, lum_chrom, code):
  if ac_dc == 'ac':
    if lum_chrom == 'lum':
      return get_run_ac_lum(code)
    else:
      return get_run_ac_chrom(code)
  else:
    if lum_chrom == 'lum':
      return get_run_dc_lum(code)
    else:
      return get_run_dc_chrom(code)

def get_category_dc(dc):
  if dc == 0:
      return 0
  elif abs(dc) <= 1:
      return 1
  elif abs(dc) <= 3:
      return 2
  elif abs(dc) <= 7:
      return 3
  elif abs(dc) <= 15:
      return 4
  elif abs(dc) <= 31:
      return 5
  elif abs(dc) <= 63:
      return 6
  elif abs(dc) <= 127:
      return 7
  elif abs(dc) <= 255:
      return 8
  elif abs(dc) <= 511:
      return 9
  elif abs(dc) <= 1023:
      return 10
  elif abs(dc) <= 2047:
      return 11
  else:
      print("No category for this difference")

def get_category_ac(ac):
  if ac == 0:
      return 0
  elif abs(ac) <= 1:
      return 1
  elif abs(ac) <= 3:
      return 2
  elif abs(ac) <= 7:
      return 3
  elif abs(ac) <= 15:
      return 4
  elif abs(ac) <= 31:
      return 5
  elif abs(ac) <= 63:
      return 6
  elif abs(ac) <= 127:
      return 7
  elif abs(ac) <= 255:
      return 8
  elif abs(ac) <= 511:
      return 9
  elif abs(ac) <= 1023:
      return 10
  else:
      print("No category for this difference")

def get_huffman_dc_lum(cat):
  return dc_lum[cat]

def get_huffman_dc_chrom(cat):
  return dc_chrom[cat]

def get_huffman_ac_lum(cat):
  return ac_lum[cat]

def get_huffman_ac_chrom(cat):
  return ac_chrom[cat]

def get_run_dc_lum(code):
  for key, value in dc_lum.items():
    if value == code:
      return key
  return None

def get_run_dc_chrom(code):
  for key, value in dc_chrom.items():
    if value == code:
      return key
  return None

def get_run_ac_lum(code):
  for key, value in ac_lum.items():
    if value == code:
      return key
  return None

def get_run_ac_chrom(code):
  for key, value in ac_chrom.items():
    if value == code:
      return key
  return None

def twos_complement(num):
  return format(2 ** 8 + num, f'08b')

def inverse_twos_complement(bin_str):
  inverted = ''
  for i in range(len(bin_str)):
    if bin_str[i] == '0':
      inverted += '1'
    else:
      inverted += '0'
  return -(int(inverted, 2) + 1)
